# https://taskfile.dev

version: '2'

tasks:

  # create / load initial files/containers
  init:
    cmds:
      - task: init:sshkey
      - task: init:compile-ipxe
      - task: init:compile-go
      - task: init:copy-go-tmpl
      - cd pxe; task init


  # create ssh-key-pair if no public key exists
  # to get ssh public key directly from github: wget https://github.com/tillhoff.keys -O key.pub
  init:sshkey:
    cmds:
      - ./scripts/ssh-keygen.sh
    status:
      - test -f ./key.pub.secret


  init:compile-ipxe:
    cmds:
      - cd build-ipxe; task build
      - cd build-ipxe; task run
      - cp build-ipxe/ipxe.efi pxe/containerdata/tftp/
      - cp build-ipxe/undionly.kpxe pxe/containerdata/tftp/
    sources:
      - build-ipxe/Dockerfile
    generates:
      - pxe/containerdata/tftp/ipxe.efi
      - pxe/containerdata/tftp/undionly.kpxe


  # compile the go binary if newer version exists
  init:compile-go:
    cmds:
      - cmd: docker stop pxe # else 'main'-binary could be in use
        ignore_error: true
      - cd build-golang; task compile
      - cp build-golang/main pxe/containerdata/go/main
    sources:
      - build-golang/*.go
    generates:
      - pxe/containerdata/go/main
  
  init:copy-go-tmpl:
    cmds:
      - cp build-golang/*.tmpl pxe/containerdata/go/
    sources:
      - build-golang/*.tmpl
    generates:
      - pxe/containerdata/go/*.tmpl


  # run the software
  run:
    cmds:
      - cd pxe; task run
    deps:
      - init
    preconditions:
      - test -f ./key.pub.secret
      - test -f ./pxe/containerdata/web/netboot/pxelinux.0

  # run ansible-playbook
  ansible:playbook:
    cmds:
      - cd ansible; ansible-playbook -i ../hosts ./playbook.yaml --private-key ../key.secret -u enforge

  # reboot a host
  reboot:
    cmds:
      - ./scripts/reboot.sh

  
  # ssh into a host
  ssh:
    cmds:
      - ./scripts/ssh.sh

  # ssh into a host and reboot it
  ssh:reboot:
    cmds:
      - ./scripts/reboot.sh

  # ssh into a host and reboot via network
  ssh:netboot:
    cmds:
      - ./scripts/reboot-from-network.sh

  # ssh into a host and shut it down
  ssh:poweroff:
    cmds:
      - ./scripts/poweroff.sh
